package si

import scala.sys.process._
import java.io.File
import si.TP.home
import si.TP.escritorio

// como una interface de java pero con metodos ya implementados
sealed trait Navegador {
  val so: String
  // por ahora, mientras no haya implementaciones para otros SO
  val cookieDir: String
  lazy val enviarCookieAlEscritorio: Int = Seq("bash", "-c", s"cp $cookieDir $escritorio").!
}


final case class Chrome(so: String) extends Navegador {
  /* asi quedaria con los demas SO implementados, matcheo por tipo de SO y ejecuto comando correspondiente
  val cookieDir = so match {
    case Linux: SO => home + "/.config/google-chrome/Default/Cookies"
    case Windows: SO => "sarasa1"
    case Darwin: SO => "sarasa2"
  }
  */
  val cookieDir = home + "/.config/google-chrome/Default/Cookies"
}

final case class Firefox(so: String) extends Navegador {
  private val firiDir = getListOfSubDirectories(new File(home + "/.mozilla/firefox"))
  private val profileDir = firiDir.filter { str => str.reverse.take(8) == ".default".reverse }.head.trim
  val cookieDir = home + "/.mozilla/firefox/" + profileDir + "/cookies.sqlite"
}